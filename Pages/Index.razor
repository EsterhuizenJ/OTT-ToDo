@page "/"
@using DataLogicLayer
@inject data_service todo_service
@inject IJSRuntime JS

<h1>To-Do List</h1>

<div class="todo-container">

    <!-- Modal -->
    <div class="modal fade" id="new_task_model" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="exampleModalLabel">Add New Task</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="title">Title:</label>
                        <input type="text" id="title" @bind="newTask.Title" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="description">Description:</label>
                        <textarea id="description" @bind="newTask.Description" class="form-control"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button @onclick="AddTask" class="btn btn-primary">Save</button>
                </div>
            </div>
        </div>
    </div>


    <div class="task-input">
        <h3>Add New Task</h3>

        <button type="button" class="btn btn-primary" @onclick="ShowModal">
           Add New Task
        </button>
    </div>

    <div class="task-controls">
        <div class="form-check form-switch">
            <input class="form-check-input" type="checkbox" role="switch" @bind="completed_flag" @onclick="FilterToggle">
            <label class="form-check-label" for="switchCheckDefault">Include Completed Tasks</label>
        </div>

        <button @onclick="ExportToExcel" class="btn btn-success">Export to Excel</button>
    </div>




    <div class="task-list">
        <h3>Tasks</h3>
        @if (tasks.Any())
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Description</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var task in tasks)
                    {
                        <tr class="@(task.IsCompleted ? "completed" : "")">
                            <td>@task.Title</td>
                            <td>@task.Description</td>
                            <td>
                                <input type="checkbox" @onchange="@(() => ToggleTaskCompletion(task))" />
                                @(task.IsCompleted ? "Completed" : "Pending")
                            </td>
                            <td>
                                <button @onclick="@(() => DeleteTask(task))" class="btn btn-danger">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>No tasks found.</p>
        }
    </div>
</div>

@code {
    private data_class_todo newTask = new data_class_todo();
    private List<data_class_todo> tasks = new List<data_class_todo>();
    private bool completed_flag = false;


    protected override void OnInitialized()
    {
        LoadTasks();
    }

    private async Task ShowModal()
    {
        await JS.InvokeVoidAsync("showModal", "new_task_model");
    }

    private void LoadTasks()
    {
        tasks = todo_service.get_all_tasks(completed_flag);
    }

    private void AddTask()
    {
        if (!string.IsNullOrWhiteSpace(newTask.Title))
        {
            todo_service.create_new_task(newTask);
            newTask = new data_class_todo();
            JS.InvokeVoidAsync("hideModal", "new_task_model");
            LoadTasks();
        }
    }

    private void FilterToggle()
    {
        LoadTasks();
    }

    private void ToggleTaskCompletion(data_class_todo tsk)
    {
        todo_service.ToggleTaskCompletion(tsk.Id);
        LoadTasks();
    }

    private void DeleteTask(data_class_todo tsk)
    {
        todo_service.delete_task(tsk);
        LoadTasks();
    }
    private async Task ExportToExcel()
    {
        var excelData = todo_service.ExportToExcel();
        var fileName = $"TodoList-{DateTime.Now:yyyyMMddHHmmss}.xlsx";

        await JS.InvokeVoidAsync("downloadFile", Convert.ToBase64String(excelData), fileName, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
    }
}